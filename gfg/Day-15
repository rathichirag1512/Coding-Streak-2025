

// User function Template for Java

class Solution {
    public int longestSubarray(int[] arr, int k) {
        // code here
        int n= arr.length;
        Map<Integer, Integer> prefixSumMap = new HashMap<>();
        int maxLength = 0;
        int prefixSum = 0;

        for (int i = 0; i < n; i++) {
            // Add current element to the prefix sum
            prefixSum += arr[i];

            // If the current prefix sum equals k, update maxLength
            if (prefixSum == k) {
                maxLength = i + 1;
            }

            // If (prefixSum - k) is found in the map, calculate subarray length
            if (prefixSumMap.containsKey(prefixSum - k)) {
                maxLength = Math.max(maxLength, i - prefixSumMap.get(prefixSum - k));
            }

            // Add the prefix sum to the map if it is not already present
            if (!prefixSumMap.containsKey(prefixSum)) {
                prefixSumMap.put(prefixSum, i);
            }
        }
        return maxLength;
    }
}
